// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Product {
  id          String         @id @default(cuid())
  image       String?
  name        String
  description String?  @db.Text
  price       Int
  weight      String?
  typeId      String
  type        ProductType @relation(fields: [typeId], references: [id])
  orders      OrderProduct[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime? 
}

model ProductType {
  id          String  @id @default(cuid())
  name        String
  shippable   Boolean @default(false)

  products    Product[]
}


model OrderProduct {
  id              String        @id @default(cuid())
  productId       String
  orderId         String
  product         Product       @relation(fields: [productId], references: [id])
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  size            String?
  factor          String?
  format          String?
  color           String? 
  qty             Int           @default(1)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([size, factor, format, color])
}

model Order {
  id       String         @id @default(cuid())
  userId   String?
  shopId   String?
  status   OrderStatus    @default(CART)
  shipping Shipping?
  user     User?          @relation(fields: [userId], references: [id])
  items    OrderProduct[]
  cartRef  String         @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Shipping {
  id          String  @id @default(cuid())
  cost        Int    @default(0)    
  shipId      String?
  orderId     String  @unique
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  name        String
  lastName    String
  street      String
  number      String
  optional    String?
  zip         String
  country     String
  phone       String?
  email       String

  parcels     Parcel[]
}

model Parcel {
  id         String @id @default(cuid())
  name       String
  weight     String
  height     String
  length     String
  width      String
  massUnit   String @default("g")
  distanceUnit String @default("cm")

  shippings  Shipping[]
}

model Post {
  id          Int        @id @default(autoincrement())
  name        String
  url         String?
  type        PostType   @default(POST)
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  content     String?    @db.MediumText()
  status      PostStatus
  createdBy   User       @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  role          MioRole       @default(LOSER)
  email         String?       @unique
  emailVerified DateTime?
  deletedAt     DateTime?
  image         String?
  customerId    String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  sig           String?
  title         String?
  orders        Order[]
  contact       ContactLinks?
}

model ContactLinks {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  instagram String?
  twitch    String?
  twitter   String?
  youtube   String?
  tiktok    String?
  reddit    String?
  email     String?

  @@unique([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MioRole {
  ADMIO
  GORLAMI
  USER
  LOSER
}

enum PostType {
  POST
  AIPOST
  PROJECT
}

enum PostStatus {
  PUBLIC
  HIDDEN
  DRAFT
}

enum OrderStatus {
  CART        // Initial state when items are added to the cart but not yet purchased
  PENDING     // Order has been created but payment has not yet been confirmed
  PROCESSING  // Payment has been confirmed, and the order is being prepared for shipment
  SHIPPED     // The order has been shipped and is on its way to the customer
  DELIVERED   // The order has been delivered to the customer
  COMPLETED   // The order has been successfully completed, and all processes are finalized
  CANCELLED   // The order has been cancelled by the customer or the seller
  DECLINED    // The payment was declined, and the order cannot be processed
  REFUND      // The order has been refunded, either partially or fully
  RETURNED    // The customer has returned the order, and it is being processed
  EXCHANGED    // The customer has exchanged the order for a different item
  ON_HOLD     // The order is on hold for some reason, such as payment verification or stock issues
}
